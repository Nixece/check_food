import streamlit as st

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞
def classify_waste(item):
    # Dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞
    waste_types = {
        "‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ": [
            "‡∏ñ‡∏∏‡∏á‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å", "‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "‡∏ã‡∏≠‡∏á‡∏Ç‡∏ô‡∏°", "‡∏ü‡∏≠‡∏¢‡∏•‡πå", "‡∏ñ‡∏∏‡∏á‡∏Ç‡∏ô‡∏°", 
            "‡∏´‡∏•‡∏≠‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å", "‡πÄ‡∏®‡∏©‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏•‡∏≤‡∏¢", "‡πÇ‡∏ü‡∏°", "‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å", "‡πÄ‡∏ó‡∏õ‡∏Å‡∏≤‡∏ß"
        ],
        "‡∏Ç‡∏¢‡∏∞‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•": [
            "‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©", "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Å‡∏•‡πà‡∏≠‡∏á", "‡∏Ç‡∏ß‡∏î‡πÅ‡∏Å‡πâ‡∏ß", 
            "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå", "‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©", "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏¥‡∏ä‡∏ä‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß", "‡∏ñ‡∏∏‡∏á‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•"
        ],
        "‡∏Ç‡∏¢‡∏∞‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å": [
            "‡πÄ‡∏®‡∏©‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏•‡πÑ‡∏°‡πâ", "‡πÉ‡∏ö‡πÑ‡∏°‡πâ", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏Å‡∏≤‡πÅ‡∏ü‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠", 
            "‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏ó‡∏¥‡∏ä‡∏ä‡∏π‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å", "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå", "‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å"
        ]
    }

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ item ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏î
    for waste_type, items in waste_types.items():
        if item in items:
            return waste_type
    return "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"

# ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÉ‡∏ô Streamlit
st.title("‚ôªÔ∏è ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏¢‡∏Å‡∏Ç‡∏¢‡∏∞‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")
st.write("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏¥‡πâ‡∏á (‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)")

# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
input_items = st.text_area("üóëÔ∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏¥‡πâ‡∏á", 
                          help="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å, ‡πÄ‡∏®‡∏©‡∏≠‡∏≤‡∏´‡∏≤‡∏£, ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© ‡∏Ø‡∏•‡∏Ø")

# ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if input_items:
    items = [item.strip().lower() for item in input_items.split("\n") if item.strip()]
    
    categorized_waste = {"‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ": [], "‡∏Ç‡∏¢‡∏∞‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•": [], "‡∏Ç‡∏¢‡∏∞‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å": [], "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": []}

    for item in items:
        waste_type = classify_waste(item)
        categorized_waste[waste_type].append(item)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö Markdown
    st.subheader("üìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ç‡∏¢‡∏∞")
    
    for waste_type, items in categorized_waste.items():
        if items:
            st.markdown(f"**{waste_type}**: {', '.join(items)}")
        else:
            st.markdown(f"**{waste_type}**: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ")

