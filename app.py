import streamlit as st
import tensorflow as tf
import numpy as np
import cv2
from PIL import Image

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• MobileNetV2 ‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ImageNet
model = tf.keras.applications.MobileNetV2(weights="imagenet")

# Mapping label ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‚Üí ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞‡πÑ‡∏ó‡∏¢
def map_label_to_waste(label):
    label = label.lower()

    recycle = ['bottle', 'can', 'carton', 'glass', 'paper', 'plastic', 'tin', 'box']
    organic = ['banana', 'apple', 'orange', 'vegetable', 'food', 'fruit', 'corn', 'meat']
    general = ['trash', 'diaper', 'tissue', 'sponge', 'wrapper']

    if any(word in label for word in recycle):
        return '‡∏Ç‡∏¢‡∏∞‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•'
    elif any(word in label for word in organic):
        return '‡∏Ç‡∏¢‡∏∞‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å'
    else:
        return '‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'

# ‡πÅ‡∏õ‡∏• label ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‚Üí ‡πÑ‡∏ó‡∏¢ (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
def translate_label(label):
    translations = {
        'banana': '‡∏Å‡∏•‡πâ‡∏ß‡∏¢',
        'apple': '‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•',
        'plastic_bottle': '‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å',
        'carton': '‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©',
        'glass': '‡πÅ‡∏Å‡πâ‡∏ß',
        'can': '‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á',
        'bottle': '‡∏Ç‡∏ß‡∏î',
        'trash': '‡∏Ç‡∏¢‡∏∞',
        'tissue': '‡∏ó‡∏¥‡∏ä‡∏ä‡∏π‡πà',
        'box': '‡∏Å‡∏•‡πà‡∏≠‡∏á',
        'metal_can': '‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡πÇ‡∏•‡∏´‡∏∞'
    }
    return translations.get(label.lower(), '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')

# ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
def classify_image(img):
    img = cv2.resize(img, (224, 224))
    img = img / 255.0
    img = np.expand_dims(img, axis=0)
    preds = model.predict(img)
    decoded = tf.keras.applications.mobilenet_v2.decode_predictions(preds, top=1)[0][0]
    return decoded  # (id, label, score)

# UI ‡∏î‡πâ‡∏ß‡∏¢ Streamlit
st.set_page_config(page_title="Waste Classifier", layout="centered")
st.title("‚ôªÔ∏è Waste Classifier (MobileNetV2 - ImageNet)")
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì")

uploaded_file = st.file_uploader("üì∑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Ç‡∏¢‡∏∞", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    img_np = np.array(image)
    st.image(image, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    imagenet_id, label, score = classify_image(img_np)
    label_th = translate_label(label)
    category = map_label_to_waste(label)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    st.markdown("---")
    st.subheader("üß† ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å:")
    st.write(f"**Label (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©):** `{label}`")
    st.write(f"**Label (‡πÑ‡∏ó‡∏¢):** `{label_th}`")
    st.write(f"**‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞:** üóëÔ∏è `{category}`")
    st.write(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à:** `{score * 100:.2f}%`")
